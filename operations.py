import json
import string
import random
from json import JSONDecodeError

def Register(type,member_json_file,admin_json_file,Full_Name,Address,Email,Password):
    '''Register Function || Return True if registered successfully else False'''
    if type.lower()=='admin':
        f=open(admin_json_file,'r+')
        d={
            "Full Name":Full_Name,
            "Address":Address,
            "Email":Email,
            "Password":Password,
        }
        try:
            content=json.load(f)
            if d not in content:
                content.append(d)
                f.seek(0)
                f.truncate()
                json.dump(content,f)
        except JSONDecodeError:
            l=[]
            l.append(d)
            json.dump(l,f)
        f.close()
        return True
    elif type.lower()=='member':
        f=open(member_json_file,'r+')
        d={
            "Full Name":Full_Name,
            "Address":Address,
            "Email":Email,
            "Password":Password,
        }
        try:
            content=json.load(f)
            if d not in content:
                content.append(d)
                f.seek(0)
                f.truncate()
                json.dump(content,f)
        except JSONDecodeError:
            l=[]
            l.append(d)
            json.dump(l,f)
        f.close()
        return True
    else:
        return False

def Login(type,members_json_file,admin_json_file,Email,Password):
    '''Login Functionality || Return True if successfully logged in else False'''
    d=0
    if type.lower()=='admin':
        f=open(admin_json_file,'r+')
    else:
        f=open(members_json_file,'r+')
    try:
        content=json.load(f)
    except JSONDecodeError:
        return False
    for i in range(len(content)):
        if content[i]["Email"]==Email and content[i]["Password"]==Password:
            d=1
            break
    f.seek(0)
    f.truncate()
    json.dump(content,f)
    f.close()
    if d==0:
        return False
    return True

def AutoGenerate_ProductID():
    '''Return a autogenerated random product ID'''
    product_ID=''.join(random.choices(string.ascii_uppercase+string.digits,k=4))
    return product_ID

def AutoGenerate_OrderID():
    '''Return a autogenerated random product ID'''
    Order_ID=''.join(random.choices(string.ascii_uppercase+string.digits,k=3))
    return Order_ID

def Create_Product(owner,product_json_file,product_ID,product_name,manufacturer_name,price,discount,total_stock_available):
    '''Creating a product || Return True if successfully created else False'''
    dict_obj = {"Created By": owner, "Product ID": product_ID, "Product Name": product_name, "Manufacturer Name": manufacturer_name, "Price": price, "Discount": discount, "Total Stock Available": total_stock_available}
    
    try :
        
        f=open(product_json_file,'r+')
        file_data=json.load(f)
        file_data.append(dict_obj)
        write_file = open(product_json_file,"w")
        json.dump(file_data,write_file)
        return True

    except Exception as e:
        return False

def Read_Products(owner,product_json_file):
    '''Reading Products created by the admin(owner)'''
    f=open(product_json_file,'r+')
    file_data=json.load(f)
    l=[]
    for i in file_data:
        if i["Created By"]==owner:
             l.append(i)
    return l
            
    
    

def Read_Product_By_ID(product_json_file,product_ID,Details):
    '''Reading product by ID'''
    f=open(product_json_file,'r+')
    file_data=json.load(f)
    for i in file_data:
        if i["Product ID"]==product_ID:
            Details.append(i)
            return Details
            
    

def Update_Product(product_json_file,product_ID,detail_to_be_updated,new_value):
    '''Updating Product || Return True if successfully updated else False'''
    try :
        
        f=open(product_json_file,'r+')
        file_data=json.load(f)
        for i in file_data:
            if i["Product ID"]==product_ID:
                if detail_to_be_updated=="Price" or detail_to_be_updated=="Total Stock Available":
                    new_value=int(new_value)
                i[detail_to_be_updated]=new_value
                write_file = open(product_json_file,"w")
                json.dump(file_data,write_file)
                return True

    except Exception as e:
        return False

    
def Delete_Product(product_json_file,product_ID):
    '''Deleting Product || Return True if successfully deleted else False'''
    try :
        
        f=open(product_json_file,'r+')
        file_data=json.load(f)
        for i in file_data:
            if i["Product ID"]==product_ID:
                file_data.remove(i)
                write_file = open(product_json_file,"w")
                json.dump(file_data,write_file)
                return True

    except Exception as e:
        return False

    

def Update_Member(member_json_file,name,detail_to_be_updated,new_value):
    '''Updating Member Details || Return True if successfully updated else False'''
    try :
        
        f=open(member_json_file,'r+')
        file_data=json.load(f)
        for i in file_data:
            if i["Full Name"]==name:
                i[detail_to_be_updated]=new_value
                write_file = open(member_json_file,"w")
                json.dump(file_data,write_file)
                return True

    except Exception as e:
        return False
    

def Place_Order(order_json_file,ordered_by,delivery_address,product_json_file,product_ID,Quantity,Order_ID):
    '''Placing Order, Calculate the Price after discount and Total cost of the order || Return True if order placed successfully else False'''
    f=open(product_json_file,'r+')
    file_data=json.load(f)
    f1=open(order_json_file,'r+')
    file_data2=json.load(f1)
    try:
        
        for i in file_data:
            if i["Product ID"]==product_ID:
                dis=int(i["Discount"][0:-1])
                
                pad= i["Price"] - ((i["Price"]*dis)/100)
                cost=pad*Quantity
                dict_obj={"Order ID": Order_ID, "Product Name":i["Product Name"], "Price": i["Price"], "Discount": i["Discount"], "Price after Discount": pad, "Quantity": Quantity, "Total Cost": cost, "Ordered By": ordered_by, "Delivering to": delivery_address}
                file_data2.append(dict_obj)
                write_file = open(order_json_file,"w")
                json.dump(file_data2,write_file)
                i["Total Stock Available"]=i["Total Stock Available"]-Quantity
                write_file2 = open(product_json_file,"w")
                json.dump(file_data,write_file2)
                return True
    except Exception as e:
        return False    
            

def Order_History(order_json_file,Name,details):
    '''Append the order information into details list'''
    f=open(order_json_file,'r+')
    file_data=json.load(f)
    for i in file_data:
        if i["Ordered By"]==Name:
            details.append(i)
    return details
    

